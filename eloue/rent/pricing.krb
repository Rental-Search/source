month_package
    use pricing(month, $started_at, $ended_at, $delta)
    when
        prices.price(5, $amount)
        check $delta.days >= calendar.monthrange($started_at.year, $started_at.month)[1]

two_weeks_package
    use pricing(two_weeks, $started_at, $ended_at, $delta)
    when
        prices.price(4, $amount)
        check $delta.days < calendar.monthrange($started_at.year, $started_at.month)[1]
        check $delta.days >= 14

week_package
    use pricing(week, $started_at, $ended_at, $delta)
    when
        prices.price(3, $amount)
        check $delta.days < 14
        check $delta.days >= 7

week_end_package
    use pricing(week_end, $started_at, $ended_at, $delta)
    when
        prices.price(2, $amount)
        $week_end = (calendar.weekday($ended_at.year, $ended_at.month, $ended_at.day) == 0 and calendar.weekday($started_at.year, $started_at.month, $started_at.day) >= 4)
        check $week_end == True

day_package
    use pricing(day, $started_at, $ended_at, $delta)
    when
        prices.price(1, $amount)
        $week_end = (calendar.weekday($ended_at.year, $ended_at.month, $ended_at.day) == 0 and calendar.weekday($started_at.year, $started_at.month, $started_at.day) >= 4)
        check $week_end != True
        check $delta.days < 7
        check $delta.days >= 1

hour_package
    use pricing(hour, $start_at, $ended_at, $delta)
    when
        prices.price(0, $amount)
        check $delta.days < 1

day_package_for_week
    use pricing(day, $started_at, $ended_at, $delta)
    when
        prices.price(1, $amount)
        check $delta.days < 14
        notany
            prices.price(3, $amount)
            prices.price(4, $amount)
            prices.price(5, $amount)

day_package_for_two_weeks
    use pricing(day, $started_at, $ended_at, $delta)
    when
        prices.price(1, $amount)
        check $delta.days < calendar.monthrange($started_at.year, $started_at.month)[1]
        notany
            prices.price(3, $amount)
            prices.price(4, $amount)
            prices.price(5, $amount)

day_package_for_month
    use pricing(day, $started_at, $ended_at, $delta)
    when
        prices.price(1, $amount)
        check $delta.days >= calendar.monthrange($started_at.year, $started_at.month)[1]
        notany
            prices.price(3, $amount)
            prices.price(4, $amount)
            prices.price(5, $amount)

week_package_for_two_weeks
    use pricing(week, $started_at, $ended_at, $delta)
    when
        prices.price(3, $amount)
        check $delta.days < calendar.monthrange($started_at.year, $started_at.month)[1]
        notany
            prices.price(4, $amount)
            prices.price(5, $amount)

week_package_for_month
    use pricing(week, $started_at, $ended_at, $delta)
    when
        prices.price(3, $amount)
        check $delta.days >= calendar.monthrange($started_at.year, $started_at.month)[1]
        notany
            prices.price(4, $amount)
            prices.price(5, $amount)

two_weeks_package_for_month
    use pricing(two_weeks, $started_at, $ended_at, $delta)
    when
        prices.price(4, $amount)
        check $delta.days >= calendar.monthrange($started_at.year, $started_at.month)[1]
        notany
            prices.price(5, $amount)

bc_extras
    import datetime, calendar